
// This file was auto-generated by ML.NET Model Builder. 

// using MLModel_ConsoleApp;

// // Create single instance of sample data from first line of dataset for model input
// MLModel.ModelInput sampleData = new MLModel.ModelInput()
// {
//     UserId = 1F,
//     MovieId = 3F,
// };

// Console.WriteLine("Using model to make single prediction -- Comparing actual Rating with predicted Rating from sample data...\n\n");

// Console.WriteLine($"UserId: {sampleData.UserId}");
// Console.WriteLine($"MovieId: {sampleData.MovieId}");
// //Console.WriteLine($"Rating: {4F}");

// var predictionResult = MLModel.Predict(sampleData);
// Console.WriteLine($"\n\nPredicted Rating: {predictionResult.Score}\n\n");

// Console.WriteLine("=============== End of process, hit any key to finish ===============");
// Console.ReadKey();

using Microsoft.ML;
using MLModel_ConsoleApp;

MLContext mlc = new MLContext();
string Filename = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "recommendation-ratings-train.txt");
IDataView dv=mlc.Data.LoadFromTextFile<MLModel.ModelInput>(Filename, separatorChar:',', hasHeader:true);

IEnumerable<MLModel.ModelInput> e = mlc.Data.CreateEnumerable<MLModel.ModelInput>(dv, reuseRowObject: true);

List<MLModel.ModelOutput> Scores = new List<MLModel.ModelOutput>();
foreach (MLModel.ModelInput row in e)
{
    MLModel.ModelInput sampleData = new MLModel.ModelInput()
    {
        UserId = 2F,
        MovieId = row.MovieId,
    };    
    var predictionResult = MLModel.Predict(sampleData);
    Scores.Add(predictionResult);
}

foreach(MLModel.ModelOutput mo in Scores.OrderByDescending(p => p.Score).Skip(0).Take(5))
{
    Console.WriteLine($"UserId:{mo.UserId}, MovieId:{mo.MovieId}, Score:{mo.Score}");
}
